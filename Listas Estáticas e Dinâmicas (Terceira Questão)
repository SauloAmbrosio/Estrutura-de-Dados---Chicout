# include  < stdio.h >
# include  < stdlib.h >
# inclui  < string.h >

struct lista {
    char str[ 100 ];
};

typedef  struct lista Lista;

void  inserir (Lista *l, int *c) {
    printf ( " insira uma string: " );
    fflush (stdin);
    obtem (l[*c]. str );
    (*c)++;
    retorno ;
}

removedor de void (Lista *l, int *c) {
    char str[ 100 ];
    printf ("String: ");
    fflush (stdin);
    obtem (str);
    for ( int i = 0 ; i <= *c; i++) {
        teste int ;
        teste = strcmp (l[i]. str , str);
        if (teste == 0 ) {
            strcpy (l[i]. str , l[i + 1 ]. str );
            for ( int j = i; j < (*c) - 1 ; j++){
                strcpy (l[j]. str , l[j + 1 ]. str );
            }
            (*c)--;
            retorno ;
        }
    }
    printf ("String não encontrada!\n");
    retorno ;
}
void  buscar (Lista *l, int *c){
    char str[ 100 ];
    printf ("string: ");
    fflush (stdin);
    obtém (str);

    for ( int i = 0 ; i < (*c); i++){
        teste int ;
        teste = strcmp (l[i]. str , str);
        if (teste == 0 ){
            printf ("%s \n\n", l[i].str);
        }
    }
    printf ("String não encontrada!\n");
    retorno ;
}
void  editar (Lista *l, int *c){
    char str[ 100 ];
    printf ( " string: " );
    fflush (stdin);
    obtem (str);
    for ( int i = 0 ; i < (*c); i++) {
        teste int ;
        teste = strcmp (l[i]. str , str);
        if (teste == 0 ){
            char nstr[ 100 ];
            printf ( " string: " );
            fflush (stdin);
            obtem (nstr);
            strcpy (l[i]. str , nstr);
            retorno ;
        }
        printf ("String não encontrada!\n");
        retorno ;
    }
}
int  principal () {
    Lista l[ 50 ];
    int c = 0 , op;
    fazer {
        printf ("_________________\n");
        printf ("LISTA DE STRINGS\n");
        printf ("_________________\n");
        printf (" 1-Inserir\n 2-Remover\n 3-Mostrar\n 4-Buscar\n 5-Editar\n 6-Total\n Escolha uma opção: " );
        scanf (" %d " , &op);
        interruptor (op) {
            caso  1 :
                inserir (&l, &c);
            quebrar ;
            caso  2 :
                removedor (&l, &c);
            quebrar ;
            caso  3 :
            for ( int i = 0 ; i < c; i++) {
                printf ( " %s \n\n " , l[i]. str );
                }
            quebrar ;
            caso  4 :
                buscar (&l, &c);
            quebrar ;
            caso  5 :
                editar (&l, &c);
            quebrar ;
            caso  6 :
                printf ("%d strings cadastradas!\n %d perda de memoria!\n", c,( sizeof (l) - sizeof (c)*c));
            quebrar ;
            padrão :
            quebrar ;
        }
    } while (op > 0 );
    retorna  0 ;
}
