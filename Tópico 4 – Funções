43.	Fazer uma função situacao_aluno que:
a.	recebe como parâmetros: média final do aluno (0 a 100), número de faltas e quantidade de horas-aula no semestre
b.	retorna 1 se o aluno foi aprovado, de acordo com os critérios da UTFPR, e 0 caso contrário.

Critérios: média final maior ou igual a 60 e frequência maior ou igual a 75%

Fazer o teste da chamada desta função no main, recebendo valores relativos a um aluno e informando se ele foi aprovado ou não.

44.	Implementar a função RaizQuadrada. Esta função deve:
a.	Receber um número do tipo float como parâmetro.
b.	Retornar a raiz quadrada do número recebido, de tal maneira que esta raiz, quando elevada ao quadrado, apresente um erro máximo de 0.01% em relação ao valor do parâmetro.
c.	Não utilize outras funções prontas (sqrt, pow) – deve implementar utilizando um método numérico.

45.	Implementar a função inverte que recebe um número unsigned int como parâmetro e retorna este número escrito ao contrário. Ex: 431 <-> 134.

46.	Implementar a função double power (double base, double expoente), que retorna o valor de
base elevado a expoente. Dicas:
a.	Transformar o expoente em uma razão de inteiros (multiplicando ambos por 10 até o numerador ficar inteiro).
b.	Simplificar a razão de inteiros com sucessivas divisões de numerador e denominador.
c.	Calcular basenumerador
d.	Calcular	(basenumerador)1/denominador	.	Utilizar	a	função	de	raiz	anteriormente implementada.
e.	Se basenumerador estourar a faixa dos double, dividir numerador e denominador por 10 e repetir.
f.	Se numerador for negativo, resultado é 1/resultado.

47.	Fazer uma função que recebe um mês e um ano como parâmetros e retorna o número de dias daquele mês daquele ano. Dica: um ano é bissexto quando é múltiplo de 4 e não múltiplo de 100, ou também quando é múltiplo de 400.

48.	Faça uma função que recebe, por parâmetros, a hora de inicio e a hora de término de um jogo, ambas subdivididas em 2 valores distintos: horas e minutos. A função deve retornar a duração do jogo em minutos, considerando que o tempo máximo de duração de um jogo é de 24 horas e que o jogo pode começar em um dia e terminar no outro.

49.	(Cortesia Prof. Bogdan Tomoyuki Nassu) Escreva uma função que arredonda um valor dado. O número deve ser arredondado para o inteiro mais próximo. Se o número for equidistante de dois inteiros, deve ser arredondado para o valor de maior magnitude. Ou seja, 1.5 é arredondado para 2, e -1.5 é arredondado para -2. O protótipo da função deve ser:

int arredonda (double x);

50.	(Cortesia Prof. Bogdan Tomoyuki Nassu) Implementar a função cujo cabeçalho é apresentado a seguir:

unsigned char calculaParidade (unsigned char b);

Interferências, ruídos e outros fenômenos que prejudicam a integridade dos dados são problemas fundamentais quando computadores se comunicam em rede. Para detectar alterações em bits, os dados são sempre enviados com redundâncias computadas a partir dos bits originais. Este tipo de técnica de detecção de erros costuma receber o nome de checksum, e segue o mesmo princípio dos dígitos verificadores presentes em diversos documentos e identificadores numéricos (por exemplo, números de contas e agências bancárias).

Uma das técnicas de detecção de erros mais simples e mais usadas é o teste de paridade. Cada byte é enviado junto com um bit adicional, que indica se o número de bits com valor 1 no byte é par (bit redundante = 0) ou ímpar (bit redundante = 1). Por exemplo um byte com o valor 8 tem os bits 00001000, ou seja, apenas 1 bit “setado”, portanto a sua paridade é 1. Já um byte com o valor 0x55 é representado pelos bits 01010101 – 4 bits “setados”, portanto a sua paridade é 0.

A função calculaParidade deve receber como parâmetro um byte enviado ou recebido através de uma conexão, e retornar o valor do bit redundante (0 ou 1).

51.	(Cortesia Prof. Bogdan Tomoyuki Nassu) Implementar a função cujo cabeçalho é apresentado a seguir:

float calculaValorDevido (float peso, float custo_fixo, float preco_kg, float largura_faixa, float desconto_faixa, float desconto_max 
Gisele acaba de comprar um restaurante de comida por quilo que vinha dando prejuízos ao proprietário anterior. Gisele tem uma série de ideias que pretende implantar para que o empreendimento se torne lucrativo. As ideias envolvem mudanças na decoração, equipe, cardápio, público-alvo e política de preços. Uma das causas do prejuízo, notou Gisele, é que o custo da estrutura para atender a um cliente não é proporcional ao seu consumo. Por exemplo, o salário de um cozinheiro é fixo, e o esforço necessário para preparar a comida consumida por um cliente não dobra quando o consumo dobra. Além disso, existem custos fixos, como o aluguel do ponto, impostos municipais, e as despesas com limpeza. Com tudo isso, pode-se afirmar que um cliente que consome 200g é menos lucrativo para o restaurante do que outro que consome 500g não apenas em números absolutos, mas também proporcionalmente.

Para amenizar o problema, Gisele resolveu adotar uma política de “descontos progressivos”. Funciona assim: todo cliente deve pagar um valor fixo pelo atendimento. Sobre este valor, adiciona-se um segundo valor, por kg. Os primeiros 100g consumidos são calculados considerando o preço normal. Os próximos 100g recebem um desconto de 10%, os 100g seguintes um desconto de mais 10%, e assim por diante, até um desconto máximo de 50%, para o que for consumido acima de 500g. Esta medida tem como efeito colateral estimular que os clientes consumam mais, pois têm a sensação de estarem pagando cada vez menos pela comida.

A empresa onde você trabalha foi contratada para desenvolver os sistemas usados no restaurante de Gisele. Você ficou encarregado da função que calcula quanto um cliente deve pagar, com base no peso do prato e em certos parâmetros – que não foram fixados para que possam ser reconfigurados com o passar do tempo, ou modificados de acordo com a necessidade do estabelecimento. A função recebe como parâmetros o peso da comida do cliente em gramas (com o peso do prato já descontado), o preço fixo e o preço por kg em Reais, a largura das faixas de desconto em gramas, o bônus no desconto progressivo, e o desconto máximo. O valor de retorno deve ser o valor devido pelo cliente, em Reais, sem arredondamentos (i.e. não se preocupe com valores “quebrados”).
